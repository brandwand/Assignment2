package Find;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Crawler {
	private URL url;
	private int maxPages = 50;
	VisitAction i;
	ArrayList<String> toVisit = new ArrayList<String>();
	ArrayList<URL> beenVisited = new ArrayList<URL>();


	public Crawler(URL url, int maxPages, VisitAction i) {
		this.url = url;
		this.maxPages = maxPages;
		this.i = i;		
		toVisit.add(url.toString());

	}
	public void Crawl() {	
		LinkFinder find = new LinkFinder();

		while (toVisit.get(0) != null) {		

			String removed = toVisit.remove(0);	
			URL visitingURL = addProtocol(removed);	

			try {	
				find.processPage(visitingURL.openStream());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	


			Iterator<String> urlList = find.getLinks();
			while(urlList.hasNext()) {	
				boolean exists = false;
				String listOfURLs = urlList.next();
				addProtocol(listOfURLs);
				for(int i = 0; i < toVisit.size(); i++) {
					if(toVisit.contains(listOfURLs)) {
						exists = true;
					}
				}
					for(int j = 0; j < beenVisited.size(); j++) {
						if(toVisit.contains(listOfURLs)) {
							exists = true;
						}
					}
					if(!exists) {
						toVisit.add(listOfURLs);
					}
				}	
				beenVisited.add(visitingURL);
				i.visit(visitingURL);
			}		
			find.removeFromList();

		}

		public URL addProtocol(String string) {
			String pattern =  "https?";
			Pattern p = Pattern.compile(pattern);
			Matcher m = p.matcher(string);
			boolean matches = m.find();
			URL wholeURL = null;
			if(!matches) {		
				try {	

					String u = url.getProtocol() + "://" + url.getHost() + string;
					wholeURL = new URL(u);
				} catch (MalformedURLException e) {
					e.printStackTrace();
				}
			} else {
				try {
					wholeURL = new URL(string);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			return wholeURL;

		}
	}